class EventEmitter {
    constructor() {
        this.events = {};
    }

    on(event, listener) {
        if (!this.events[event]) {
            this.events[event] = [];
        }
        this.events[event].push(listener);
    }

    emit(event, ...args) {
        if (this.events[event]) {
            this.events[event].forEach(listener => listener.apply(this, args));
        }
    }
}



class tepianKuis extends EventEmitter {
    saveAnsw = false;

    constructor(element, konfigurasi) {
        super();
        this.element = element;
        this.checkAnswer = konfigurasi.checkButton;
        this.konfigurasi = konfigurasi;
        this.quizCode = konfigurasi.quiz;
        this.loadBs = konfigurasi.loadBs;
        this.index_soal = 0;
        this.init();
        this.jawabanUser = [];
        console.log(this.quizCode)
    }



    init() {
        this.axiosInit();
        this.emit("created");
        if (this.element instanceof HTMLElement) {

            if(this.loadBs){
                this.element.appendChild(this.loadCSSBootstrap());
            }
            this.element.appendChild(this.renderContainer());
            this.element.appendChild(this.loadJsBootstrap());
            this.getData()

        } else {

        }
    }

    axiosInit() {
        this.apiClient = axios.create({
            baseURL: "https://tepiankuis2.softforge.my.id/api/embed/quiz",
            timeout: 30000,
            headers: {
                'X-Api-Key': this.konfigurasi.Key,
            }
        })
    }

    peserta(data) {
        this.dataPeserta = data;
        return this
    }
    saveAnswer(save) {
        if (save && typeof this.dataPeserta != 'undefined') {
            this.saveAnsw = true;
            console.log(save)
        } else {
            this.saveAnsw = false;
            console.error("undefined User");
        }
    }

    sendUserAnswer(data) {
        var sendObj = {
            peserta: this.dataPeserta,
            jawaban: data
        }

        this.apiClient.post("/save/" + this.konfigurasi.quiz, sendObj)
            .then(Response => {
                console.log(Response);
            })
            .catch(error => {
                console.log(error)
            });
    }

    nextSoal() {

        if (this.index_soal <= this.soal_len) {
            this.index_soal += 1
            this.prev.disabled = false
            if (this.soal_len === this.index_soal) {
                this.finishQuiz()
            } else {
                this.soalText()
            }

        }

        if (this.soal_len - 1 === this.index_soal) {
            this.next.textContent = "Selesai"
        }

    }

    finishQuiz() {

        const currentDate = new Date();

        const day = currentDate.getDate().toString().padStart(2, '0');
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0'); // Bulan dimulai dari 0, tambahkan 1
        const year = currentDate.getFullYear();
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');
        const seconds = currentDate.getSeconds().toString().padStart(2, '0');

        const formattedTime = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;

        this.soal.innerHTML = ""
        this.alertContainer.innerHTML = ""
        this.jawaban.innerHTML = "";
        this.footer.classList.add("d-none");
        this.next.classList.add("d-none")
        this.prev.classList.add("d-none")
        let containerWidth = this.soal.offsetWidth;

        let row = document.createElement("div");
        row.classList.add("row");

        let colLeft = document.createElement("div");
        colLeft.classList.add("col-6");

        let colRight = document.createElement("div");
        colRight.classList.add("col-6", "text-center");

        let image = document.createElement("img")
        image.src = "https://tepiankuis.softforge.my.id/library/asset/selesai.png";
        image.classList.add("img-fluid");

        let textPoin = document.createElement("h2")
        textPoin.innerHTML = "50";
        textPoin.classList.add("text-center")
        textPoin.style = "font-size : 100px;"

        let textBenar = document.createElement("p");

        textBenar.classList.add("text-center")

        let tombolUlang = document.createElement("button");
        tombolUlang.textContent = "Coba Lagi"
        tombolUlang.classList.add("btn", "btn-primary")
        tombolUlang.style = "margin: auto;"


        let poin = 0;
        let jumlahBenar = 0;
        this.jawabanUser.forEach(element => {
            if (element.hasil) {
                jumlahBenar++
                poin += parseInt(element.data.poin, 10)
            }
        });
        let jumlahPoin = 0;
        this.soal_data.soal.forEach(element => {
            jumlahPoin += parseInt(element.poin, 10)
        })

        let nilai_benar = ((jumlahBenar / this.soal_len) * 100)
        let nilai_poin = ((poin / jumlahPoin) * 100)
        this.finishedQuiz = {
            jawaban: this.jawabanUser,
            poin: poin,
            benar: jumlahBenar,
            nilai: ((jumlahBenar / this.soal_len) * 100).toFixed(1)

        }
        this.emit("selesai", {
            jawaban: this.jawabanUser,
            poin: poin,
            benar: jumlahBenar,
            nilai: nilai_poin % 1 === 0 ? nilai_poin.toFixed(0) : nilai_poin.toFixed(1),
        });

        if (this.saveAnsw) {
            this.sendUserAnswer({
                jawaban_user: this.jawabanUser,
                jumlahBenar: jumlahBenar,
                nilai: ((jumlahBenar / this.soal_len) * 100).toFixed(1),
                jumlahPoin: jumlahPoin,
                poin: poin,
                waktu_mengerjakan: 0,
                waktu_selesai: formattedTime
            });
        }

        textBenar.textContent = "Benar :" + jumlahBenar;
        textPoin.textContent = `${((jumlahBenar / this.soal_len) * 100).toFixed(1)}`

        if (containerWidth <= 480) {
            row.style = "margin : auto; width: 100%;"
            textPoin.style = "font-size : 60px;"
        } else if (containerWidth > 480 && containerWidth <= 768) {
            textPoin.style = "font-size : 60px;"
            row.style = "margin : auto; width: 100%;"
        } else {
            row.style = "margin : auto; width: 50%;"
        }

        colLeft.appendChild(image);
        colRight.appendChild(textPoin);
        colRight.appendChild(textBenar);
        colRight.appendChild(tombolUlang);

        this.emit('finish', this.finishedQuiz);
        // event listener untuk button ulang quiz
        tombolUlang.addEventListener("click", () => {

            this.next.classList.remove("d-none")
            this.next.innerHTML = ` <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path d="M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z" fill="currentColor"></path></svg>`
            this.prev.classList.remove("d-none")
            this.index_soal = 0;
            this.jawabanUser = [];
            this.setSoal();
            this.soalText();
            this.footer.classList.remove("d-none");

        });

        row.appendChild(colLeft);
        row.appendChild(colRight);

        this.soal.appendChild(row);
    }

    prevSoal() {
        if (0 !== this.index_soal) {
            this.index_soal -= 1;
            this.next.innerHTML = ` <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path d="M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z" fill="currentColor"></path></svg>`
            this.soalText()
        }
        if (this.index_soal === 0) {
            this.prev.disabled = true
        }
    }

    getData() {
        this.apiClient.get("/get/" + this.konfigurasi.quiz)
            .then(Response => {
                const data = Response.data;
                this.soal_data = data;
                const soal = data.soal
                this.soal_len = soal.length;

                this.soalText()
                this.setSoal(data)

                this.prev.addEventListener("click", () => this.prevSoal());
                this.prev.disabled = true;
                this.next.addEventListener("click", () => this.nextSoal());

            })
            .catch(error => {
                console.error("error", error);
            })
    }

    soalText() {
        this.number.innerHTML = (this.index_soal + 1) + " / " + this.soal_len;
        this.setSoal()
    }

    setSoal() {
        // console.log(this.soal_data);
        const soal_sekarang = this.soal_data.soal[this.index_soal]
        const soal = JSON.parse(soal_sekarang.soal_data)

        this.soal.innerHTML = soal.pertanyaan


        this.renderJawaban(soal_sekarang);
    }

    renderJawaban(data) {
        var soal = JSON.parse(data.soal_data)
        this.alertContainer.innerHTML = "";
        switch (data.jenis_soal) {
            case "pilihanGanda":
                this.renderPilihanGanda(data, soal.pilihan)
                break;
            case "isianSingkat":
                this.renderIsianSingkat(data);
                break;
            default:
                break;
        }

    }

    loadCSSBootstrap() {
        const linkElement = document.createElement("link");
        linkElement.setAttribute("rel", "stylesheet");
        linkElement.setAttribute("href", "https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css");
        linkElement.setAttribute("integrity", "sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9");
        linkElement.setAttribute("crossorigin", "anonymous");

        return linkElement;
    }

    loadJsBootstrap() {
        const scriptElement = document.createElement("script");
        scriptElement.setAttribute("src", "https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js");
        scriptElement.setAttribute("integrity", "sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm");
        scriptElement.setAttribute("crossorigin", "anonymous");

        return scriptElement;
    }

    loadAxios() {
        const scriptElement = document.createElement("script");
        scriptElement.setAttribute("src", "https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js");

        document.head.appendChild(scriptElement);
        return scriptElement;
    }

    renderContainer() {

        var container = document.createElement("div");
        container.classList.add("card");

        const cardHeader = document.createElement("div");
        cardHeader.classList.add("card-header", "d-flex", "justify-content-between", "align-items-baseline");

        const heading = document.createElement("h5");
        heading.id = "nomerSoal";
        if ('title' in this.konfigurasi) {
            heading.textContent = this.konfigurasi.title;
        } else {
            heading.textContent = "Pertanyaan";
        }
        // append heading
        cardHeader.appendChild(heading);

        const nav = document.createElement("div");
        nav.classList.add("d-flex", "justify-content-between", "align-items-center");

        const buttonNext = document.createElement("button");
        buttonNext.classList.add("btn", "btn-sm", "btn-primary", "mx-2");
        buttonNext.id = `nextSoal_${this.quizCode}`;
        buttonNext.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path d="M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z" fill="currentColor"></path></svg> `

        const buttonPrev = document.createElement("button");
        buttonPrev.classList.add("btn", "btn-sm", "btn-primary", "mx-2");
        buttonPrev.id = `prevSoal_${this.quizCode}`;
        buttonPrev.innerHTML = `  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path d="M10.8284 12.0007L15.7782 16.9504L14.364 18.3646L8 12.0007L14.364 5.63672L15.7782 7.05093L10.8284 12.0007Z" fill="currentColor"></path></svg>`;


        const textNomer = document.createElement("h4");
        textNomer.id = "nomerSoal";
        textNomer.textContent = "0 / 0";

        nav.appendChild(buttonPrev);
        nav.appendChild(textNomer);
        nav.appendChild(buttonNext);

        cardHeader.appendChild(nav);
        container.appendChild(cardHeader);


        const cardBodyDiv = document.createElement("div");
        cardBodyDiv.className = "card-body";

        const soalDiv = document.createElement("div");
        soalDiv.classList.add("overflow-auto")
        soalDiv.id = "soal-render";

        const jawabanDiv = document.createElement("div");
        jawabanDiv.id = "jawaban";
        jawabanDiv.className = "row mx-2";

        const alertContainer = document.createElement("div");
        alertContainer.className = "mx-5"


        const footer = document.createElement("div");
        footer.classList.add("card-footer", "d-flex", "justify-content-between", "align-items-center");


        const buttonCheck = document.createElement("button");
        buttonCheck.classList.add("btn", "btn-primary", "mx-2");
        buttonCheck.id = `checkSoal_${this.quizCode}`;
        buttonCheck.textContent = "Periksa Jawaban";
        const self = this;
        buttonCheck.addEventListener("click", () => {
            const data = self.soal_data.soal[self.index_soal];
            var indexOfJawaban = self.jawabanUser.findIndex(item => item.id === data.id);
            console.log(indexOfJawaban);
            alertContainer.innerHTML = "";
            if (indexOfJawaban != -1) {

                if (self.jawabanUser[indexOfJawaban].hasil) {
                    self.giveFeedBack(1)
                } else {
                    self.giveFeedBack(0)
                }

            } else {
                self.giveFeedBack(-1)
            }
        })

        footer.appendChild(buttonCheck);

        // set all to global
        this.prev = buttonPrev;
        this.next = buttonNext;
        this.number = textNomer;
        this.headingCard = heading;

        this.soal = soalDiv;
        this.jawaban = jawabanDiv;
        this.alertContainer = alertContainer;
        this.footer = footer;

        this.footer.classList.add("d-none");
        if(this.checkAnswer){
            this.footer.classList.remove("d-none");
        }

        cardBodyDiv.appendChild(soalDiv);
        cardBodyDiv.appendChild(jawabanDiv);
        container.appendChild(cardBodyDiv);
        container.appendChild(alertContainer);
        container.appendChild(footer);


        return container;
    }


    getUserAnswer() {
        const data = this.soal_data.soal[this.index_soal];

        // console.log(data)
        var soal = JSON.parse(data.soal_data);
        console.log(soal);
        switch (data.jenis_soal) {
            case "pilihanGanda":
                const checkedRadioButton = [...document.querySelectorAll('input[name="' + `${data.id}_${this.quizCode}` + '"]:checked')][0];
                if (checkedRadioButton) {
                    console.log(checkedRadioButton)
                    var hasil = soal.pilihan.find(item => `${item.id}_${this.quizCode}` === checkedRadioButton.id).benar;

                    // var saved = jawabanUser.find(item => item.id === data.id);
                    var indexOfJawaban = this.jawabanUser.findIndex(item => item.id === data.id);
                    var splitIdJawaban = checkedRadioButton.id.split("_");
                    var idJawaban = `${splitIdJawaban[0]}_${splitIdJawaban[1]}`;
                    if (indexOfJawaban != -1) {
                        this.jawabanUser[indexOfJawaban].jawaban = idJawaban;
                        this.jawabanUser[indexOfJawaban].hasil = hasil;
                    } else {
                        console.log(hasil)
                        this.jawabanUser.push({
                            id: data.id,
                            data: { id: data.id, poin: data.poin },
                            // soal: soal,
                            jawaban: idJawaban,
                            hasil: hasil
                        })
                    }
                }
                break;
            case "isianSingkat":
                var input = document.getElementById(`${this.quizCode}_${data.id}`);
                var hasil = soal.jawaban == input.value ? true : false;
                console.log(hasil)
                if (input.value.length > 0) {
                    var indexOfJawaban = this.jawabanUser.findIndex(item => item.id === data.id);
                    if (indexOfJawaban === -1) {
                        this.jawabanUser.push({
                            id: data.id,
                            data: { id: data.id, poin: data.poin },
                            soal: soal,
                            jawaban: input.value,
                            hasil: hasil,
                        });
                    } else {
                        this.jawabanUser[indexOfJawaban].jawaban = input.value;
                    }
                }
                break;
            default:
                break;
        }
        console.log(this.jawabanUser)
    }

    renderPilihanGanda(data, pilihan) {

        const self = this;
        const abj = ["A", "B", "C", "D", "E", "F"]
        this.jawaban.innerHTML = ''
        this.jawaban.classList.add("row")
        let saved = self.jawabanUser.find(item => item.id === data.id);
        var i = 0;
        pilihan.forEach(function (option) {
            var optionDiv = document.createElement('div');
            optionDiv.classList.add('form-check', 'd-flex', 'align-items-baseline', 'border', "p-3", "outer", "rounded-4", "m-1");
            let containerWidth = self.soal.offsetWidth;

            if (containerWidth <= 480) {
                optionDiv.classList.add("col-md-12")
            } else if (containerWidth > 480 && containerWidth <= 768) {
                optionDiv.classList.add("col-md-5")
            } else {

            }

            optionDiv.id = "outer_" + `${option.id}_${self.quizCode}`;
            optionDiv.style = "cursor: pointer;"
            var radioInput = document.createElement('input');
            var divClear = document.createElement("div");
            var soal = document.createElement("p");

            soal.classList.add("mx-4", "text-center", "align-self-center");
            soal.style = "margin-top:auto";
            soal.innerHTML = option.text;


            divClear.appendChild(soal);

            radioInput.classList.add("jawaban-soal", "btn-check");
            radioInput.type = 'radio';
            radioInput.name = `${data.id}_${self.quizCode}`;
            radioInput.id = `${option.id}_${self.quizCode}`; // Anda perlu memberikan id yang berbeda untuk setiap radio input

            var label = document.createElement('label');
            label.classList.add('btn', 'btn-outline-primary', "pilihan");
            label.htmlFor = `${option.id}_${self.quizCode}`; // Sesuaikan dengan id radio input yang sesuai
            label.innerHTML = abj[i];
            // label.innerHTML = option.text;


            optionDiv.addEventListener("click", () => {
                radioInput.checked = true;
                var elements = document.querySelectorAll(".outer");
                elements.forEach(function (element) {
                    element.classList.remove("border-primary");
                });
                radioInput.closest(".outer").classList.add("border-primary")
                self.getUserAnswer();
            })

            radioInput.addEventListener("change", (e) => {
                var elements = document.querySelectorAll(".outer");
                elements.forEach(function (element) {
                    element.classList.remove("border-primary");
                });
                radioInput.closest(".outer").classList.add("border-primary")
                self.getUserAnswer();
            })

            optionDiv.appendChild(radioInput);
            optionDiv.appendChild(label);
            optionDiv.appendChild(divClear);

            if (saved) {
                if (saved.jawaban == option.id) {
                    radioInput.checked = true;
                    radioInput.closest(".outer").classList.add("border-primary")
                }
            }

            self.jawaban.appendChild(optionDiv);

            i++;
        });

    }

    renderIsianSingkat(data) {
        this.jawaban.innerHTML = '';
        const self = this;
        let saved = this.jawabanUser.find(item => item.id === data.id);
        var container = document.createElement("div")
        container.classList.add("mb-3")
        var input = document.createElement("input");
        var label = document.createElement("label");

        input.classList.add("form-control", "jawaban-soal");
        input.setAttribute("type", "text");
        input.id = `${this.quizCode}_${data.id}`;
        input.placeholder = "Jawaban anda";
        input.name = data.id;

        if (saved) {
            input.value = saved.jawaban
        }

        this.timeout = null;
        input.addEventListener('keyup', () => {
            clearTimeout(this.timeout);

            self.timeout = setTimeout(function () {
                self.getUserAnswer(data)
                // console.log(self.jawabanUser);
            }, 1000)

        })

        label.setAttribute("for", data.id);
        label.textContent = "Jawaban";

        container.appendChild(label);
        container.appendChild(input);

        this.jawaban.appendChild(container);

    }

    giveFeedBack(type) {
        var self = this
        switch (type) {
            case -1:

                const alertBelumDijawab = document.createElement("div");
                alertBelumDijawab.classList.add("alert", "alert-warning", "alert-dismissible", "fade", "show");
                alertBelumDijawab.setAttribute("role", "alert");
                alertBelumDijawab.textContent = "Anda belum menjawab soal ini";
                self.alertContainer.appendChild(alertBelumDijawab);

                break;

            case 0:
                const alertSalah = document.createElement("div");
                alertSalah.classList.add("alert", "alert-danger", "alert-dismissible", "fade", "show");
                alertSalah.setAttribute("role", "alert");
                alertSalah.textContent = "🤔 Yah, jawaban Anda kurang tepat. Coba periksa kembali soalnya.";
                self.alertContainer.appendChild(alertSalah);

                break;

            case 1:
                const alertBenar = document.createElement("div");
                alertBenar.classList.add("alert", "alert-success", "alert-dismissible", "fade", "show");
                alertBenar.setAttribute("role", "alert");
                alertBenar.textContent = "😊 Selamat! Jawaban Anda benar!";
                self.alertContainer.appendChild(alertBenar);
                break;

            default:
                break;
        }
    }
}
